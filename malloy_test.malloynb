>>>malloy
sql: sales_table is {
        select: """
        SELECT           'A' as s_customer, 12 as sales
        UNION ALL SELECT 'B', 10
        UNION ALL SELECT 'C', 11
        UNION ALL SELECT 'A', 8
        UNION ALL SELECT 'A', 9
        UNION ALL SELECT 'C', 10
        UNION ALL SELECT 'D', 6
      """
      connection: "duckdb"
        }
sql: customers_table is {
        select: """
        SELECT            'A' as c_customer, 'USA' as c_country
        UNION ALL SELECT  'B', 'USA' 
        UNION ALL SELECT  'C', 'CANADA'
        UNION ALL SELECT  'D', 'USA'
        UNION ALL SELECT  'E', 'CANADA'
        UNION ALL SELECT  'F', 'CANADA'
      """
      connection: "duckdb"
        }

source: sales is from_sql(sales_table)
{
  measure: 
    total_sales is sales.sum()
    sale_count is count()

}

source: customers is from_sql(customers_table)
{
  measure : customers_count is count()
}

source: customer_sales is customers extend {
  join_many: sales on c_customer = sales.s_customer
  // count of customer where they have any data in sales.
  measure: customers_with_sales is count() {where: sales.sales != null}
}
// above i cannot divide inside measure
>>>malloy


run: customer_sales -> {
aggregate: 
    customers_count
    sales.total_sales
    customers_with_sales
    # percent
    coverage is customers_with_sales / customers_count

  }
